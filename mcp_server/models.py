# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:23:52+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, RootModel


class CountryCode(Enum):
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AI = 'AI'
    AL = 'AL'
    AM = 'AM'
    AN = 'AN'
    AO = 'AO'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AW = 'AW'
    AZ = 'AZ'
    BA = 'BA'
    BB = 'BB'
    BD = 'BD'
    BE = 'BE'
    BF = 'BF'
    BG = 'BG'
    BH = 'BH'
    BI = 'BI'
    BJ = 'BJ'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BO = 'BO'
    BR = 'BR'
    BS = 'BS'
    BT = 'BT'
    BW = 'BW'
    BY = 'BY'
    BZ = 'BZ'
    CA = 'CA'
    CC = 'CC'
    CD = 'CD'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CR = 'CR'
    CU = 'CU'
    CV = 'CV'
    CW = 'CW'
    CX = 'CX'
    CY = 'CY'
    CZ = 'CZ'
    DE = 'DE'
    DJ = 'DJ'
    DK = 'DK'
    DM = 'DM'
    DO = 'DO'
    DZ = 'DZ'
    EC = 'EC'
    EE = 'EE'
    EG = 'EG'
    EH = 'EH'
    ER = 'ER'
    ES = 'ES'
    ET = 'ET'
    FI = 'FI'
    FJ = 'FJ'
    FK = 'FK'
    FM = 'FM'
    FO = 'FO'
    FR = 'FR'
    GA = 'GA'
    GB = 'GB'
    GD = 'GD'
    GE = 'GE'
    GG = 'GG'
    GH = 'GH'
    GI = 'GI'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GQ = 'GQ'
    GR = 'GR'
    GT = 'GT'
    GU = 'GU'
    GW = 'GW'
    GY = 'GY'
    HK = 'HK'
    HN = 'HN'
    HR = 'HR'
    HT = 'HT'
    HU = 'HU'
    ID = 'ID'
    IE = 'IE'
    IL = 'IL'
    IM = 'IM'
    IN = 'IN'
    IO = 'IO'
    IQ = 'IQ'
    IR = 'IR'
    IS = 'IS'
    IT = 'IT'
    JE = 'JE'
    JM = 'JM'
    JO = 'JO'
    JP = 'JP'
    KE = 'KE'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KM = 'KM'
    KN = 'KN'
    KP = 'KP'
    KR = 'KR'
    KW = 'KW'
    KY = 'KY'
    KZ = 'KZ'
    LA = 'LA'
    LB = 'LB'
    LC = 'LC'
    LI = 'LI'
    LK = 'LK'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    LU = 'LU'
    LV = 'LV'
    LY = 'LY'
    MA = 'MA'
    MC = 'MC'
    MD = 'MD'
    ME = 'ME'
    MF = 'MF'
    MG = 'MG'
    MH = 'MH'
    MK = 'MK'
    ML = 'ML'
    MM = 'MM'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MR = 'MR'
    MS = 'MS'
    MT = 'MT'
    MU = 'MU'
    MV = 'MV'
    MW = 'MW'
    MX = 'MX'
    MY = 'MY'
    MZ = 'MZ'
    NA = 'NA'
    NC = 'NC'
    NE = 'NE'
    NG = 'NG'
    NI = 'NI'
    NL = 'NL'
    NO = 'NO'
    NP = 'NP'
    NR = 'NR'
    NU = 'NU'
    NZ = 'NZ'
    OM = 'OM'
    PA = 'PA'
    PE = 'PE'
    PF = 'PF'
    PG = 'PG'
    PH = 'PH'
    PK = 'PK'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PR = 'PR'
    PS = 'PS'
    PT = 'PT'
    PW = 'PW'
    PY = 'PY'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RS = 'RS'
    RU = 'RU'
    RW = 'RW'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SG = 'SG'
    SH = 'SH'
    SI = 'SI'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SO = 'SO'
    SR = 'SR'
    SS = 'SS'
    ST = 'ST'
    SV = 'SV'
    SX = 'SX'
    SY = 'SY'
    SZ = 'SZ'
    TC = 'TC'
    TD = 'TD'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TO = 'TO'
    TR = 'TR'
    TT = 'TT'
    TV = 'TV'
    TW = 'TW'
    TZ = 'TZ'
    UA = 'UA'
    UG = 'UG'
    US = 'US'
    UY = 'UY'
    UZ = 'UZ'
    VA = 'VA'
    VC = 'VC'
    VE = 'VE'
    VG = 'VG'
    VI = 'VI'
    VN = 'VN'
    VU = 'VU'
    WF = 'WF'
    WS = 'WS'
    XK = 'XK'
    YE = 'YE'
    YT = 'YT'
    ZA = 'ZA'
    ZM = 'ZM'
    ZW = 'ZW'


class CreditDebitIndicator(Enum):
    CREDIT = 'CREDIT'
    DEBIT = 'DEBIT'


class CurrencyCode(Enum):
    AED = 'AED'
    AFN = 'AFN'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    ARS = 'ARS'
    AUD = 'AUD'
    AWG = 'AWG'
    AZN = 'AZN'
    BAM = 'BAM'
    BBD = 'BBD'
    BDT = 'BDT'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BOB = 'BOB'
    BRL = 'BRL'
    BSD = 'BSD'
    BTN = 'BTN'
    BWP = 'BWP'
    BYN = 'BYN'
    BZD = 'BZD'
    CAD = 'CAD'
    CDF = 'CDF'
    CHF = 'CHF'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    CRC = 'CRC'
    CUC = 'CUC'
    CUP = 'CUP'
    CVE = 'CVE'
    CZK = 'CZK'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    EGP = 'EGP'
    ERN = 'ERN'
    ETB = 'ETB'
    EUR = 'EUR'
    FJD = 'FJD'
    FKP = 'FKP'
    GBP = 'GBP'
    GEL = 'GEL'
    GGP = 'GGP'
    GHS = 'GHS'
    GIP = 'GIP'
    GMD = 'GMD'
    GNF = 'GNF'
    GTQ = 'GTQ'
    GYD = 'GYD'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HTG = 'HTG'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    IMP = 'IMP'
    INR = 'INR'
    IQD = 'IQD'
    IRR = 'IRR'
    ISK = 'ISK'
    JEP = 'JEP'
    JMD = 'JMD'
    JOD = 'JOD'
    JPY = 'JPY'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBP = 'LBP'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGA = 'MGA'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRU = 'MRU'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXN = 'MXN'
    MYR = 'MYR'
    MZN = 'MZN'
    NAD = 'NAD'
    NGN = 'NGN'
    NIO = 'NIO'
    NOK = 'NOK'
    NPR = 'NPR'
    NZD = 'NZD'
    OMR = 'OMR'
    PAB = 'PAB'
    PEN = 'PEN'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PYG = 'PYG'
    QAR = 'QAR'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDG = 'SDG'
    SEK = 'SEK'
    SGD = 'SGD'
    SHP = 'SHP'
    SLL = 'SLL'
    SOS = 'SOS'
    SPL = 'SPL'
    SRD = 'SRD'
    STN = 'STN'
    SVC = 'SVC'
    SYP = 'SYP'
    SZL = 'SZL'
    THB = 'THB'
    TJS = 'TJS'
    TMT = 'TMT'
    TND = 'TND'
    TOP = 'TOP'
    TRY = 'TRY'
    TTD = 'TTD'
    TVD = 'TVD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UGX = 'UGX'
    USD = 'USD'
    UYU = 'UYU'
    UZS = 'UZS'
    VEF = 'VEF'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XCD = 'XCD'
    XDR = 'XDR'
    XOF = 'XOF'
    XPF = 'XPF'
    YER = 'YER'
    ZAR = 'ZAR'
    ZMW = 'ZMW'
    ZMK = 'ZMK'
    ZWD = 'ZWD'
    field_ = ''


class EndBalance(BaseModel):
    amount: Optional[float] = Field(None, examples=['10.1340'])
    creditDebitIndicator: Optional[CreditDebitIndicator] = None


class Type(Enum):
    invalid_request = 'invalid-request'
    invalid_application = 'invalid-application'
    invalid_feed_connection = 'invalid-feed-connection'
    duplicate_statement = 'duplicate-statement'
    invalid_end_balance = 'invalid-end-balance'
    invalid_start_and_end_date = 'invalid-start-and-end-date'
    invalid_start_date = 'invalid-start-date'
    internal_error = 'internal-error'
    feed_already_connected_in_current_organisation = (
        'feed-already-connected-in-current-organisation'
    )
    invalid_end_date = 'invalid-end-date'
    statement_not_found = 'statement-not-found'
    feed_connected_in_different_organisation = (
        'feed-connected-in-different-organisation'
    )
    feed_already_connected_in_different_organisation = (
        'feed-already-connected-in-different-organisation'
    )
    bank_feed_not_found = 'bank-feed-not-found'
    invalid_country_specified = 'invalid-country-specified'
    invalid_organisation_bank_feeds = 'invalid-organisation-bank-feeds'
    invalid_organisation_multi_currency = 'invalid-organisation-multi-currency'
    invalid_feed_connection_for_organisation = (
        'invalid-feed-connection-for-organisation'
    )
    invalid_user_role = 'invalid-user-role'
    account_not_valid = 'account-not-valid'


class Error(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Human readable detailed error description.',
        examples=[
            'The application has not been configured to use these API endpoints.'
        ],
    )
    status: Optional[int] = Field(
        None, description='The numeric HTTP Status Code, e.g. 404', examples=[403]
    )
    title: Optional[str] = Field(
        None,
        description='Human readable high level error description.',
        examples=['Invalid Application'],
    )
    type: Optional[Type] = Field(
        None,
        description='Identifies the type of error.',
        examples=['invalid-application'],
    )


class AccountType(Enum):
    BANK = 'BANK'
    CREDITCARD = 'CREDITCARD'


class Status(Enum):
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'


class FeedConnection(BaseModel):
    accountId: Optional[UUID] = Field(
        None,
        description='Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.',
        examples=['079a88ea-276d-41fb-a1f1-366ef3e22921'],
    )
    accountName: Optional[str] = Field(
        None,
        description='The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.',
        examples=["Joe's Savings Account"],
    )
    accountNumber: Optional[str] = Field(
        None,
        description='String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.',
        examples=['3809087654321500'],
    )
    accountToken: Optional[str] = Field(
        None,
        description='This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.',
        examples=['10000123'],
    )
    accountType: Optional[AccountType] = Field(
        None,
        description='High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.',
        examples=['BANK'],
    )
    country: Optional[CountryCode] = None
    currency: Optional[CurrencyCode] = None
    error: Optional[Error] = None
    id: Optional[UUID] = Field(
        None,
        description='GUID used to identify the Account.',
        examples=['0d3cf8d-95dc-4466-8dc0-47e6d1197e28'],
    )
    status: Optional[Status] = Field(
        None,
        description='the current status of the feed connection',
        examples=['REJECTED'],
    )


class Pagination(BaseModel):
    itemCount: Optional[int] = Field(
        None, description='Number of items returned', examples=[2]
    )
    page: Optional[int] = Field(
        None,
        description='Page number which specifies the set of records to retrieve. Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?page=2 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.',
        examples=[1],
    )
    pageCount: Optional[int] = Field(
        None, description='Number of pages available', examples=[1]
    )
    pageSize: Optional[int] = Field(
        None,
        description='Page size which specifies how many records per page will be returned (default 50). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize=100 to specify page size of 100.',
        examples=[10],
    )


class StartBalance(BaseModel):
    amount: Optional[float] = Field(
        None,
        description='decimal(19,4) unsigned Opening/closing balance amount.',
        examples=['9.0000'],
    )
    creditDebitIndicator: Optional[CreditDebitIndicator] = None


class Status1(Enum):
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'
    DELIVERED = 'DELIVERED'


class StatementLine(BaseModel):
    amount: Optional[float] = Field(
        None, description='Transaction amount', examples=['5.00']
    )
    chequeNumber: Optional[str] = Field(
        None, description='The cheque/check number', examples=['021']
    )
    creditDebitIndicator: Optional[CreditDebitIndicator] = None
    description: Optional[str] = Field(
        None,
        description='Transaction description',
        examples=['Description for statement line 2'],
    )
    payeeName: Optional[str] = Field(
        None,
        description='Typically the merchant or payee name',
        examples=['Payee name for statement line 2'],
    )
    postedDate: Optional[date] = Field(
        None,
        description='The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD',
        examples=['2018-06-10'],
    )
    reference: Optional[str] = Field(
        None,
        description='Optional field to enhance the Description',
        examples=['Reference for statement line 2'],
    )
    transactionId: Optional[str] = Field(
        None,
        description="Financial institute's internal transaction identifier. If provided this field is factored into duplicate detection.",
        examples=['transaction-id-2'],
    )


class StatementLines(RootModel[List[StatementLine]]):
    root: List[StatementLine]


class FeedConnections(BaseModel):
    items: Optional[List[FeedConnection]] = None
    pagination: Optional[Pagination] = None


class Statement(BaseModel):
    endBalance: Optional[EndBalance] = None
    endDate: Optional[date] = Field(
        None,
        description='Closing balance date ISO-8601 YYYY-MM-DD',
        examples=['2018-07-27'],
    )
    errors: Optional[List[Error]] = None
    feedConnectionId: Optional[UUID] = Field(
        None,
        description='The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.',
        examples=['87cb0dc8-fa32-409c-b622-19f8de8dcc83'],
    )
    id: Optional[UUID] = Field(
        None,
        description='GUID used to identify the Statement.',
        examples=['ba4f3127-5e46-427d-80ea-dea2fcd26afe'],
    )
    startBalance: Optional[StartBalance] = None
    startDate: Optional[date] = Field(
        None,
        description='Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD',
        examples=['2018-07-27'],
    )
    statementLineCount: Optional[int] = Field(None, examples=[1])
    statementLines: Optional[StatementLines] = None
    status: Optional[Status1] = Field(
        None, description='Current status of statements', examples=['PENDING']
    )


class Statements(BaseModel):
    items: Optional[List[Statement]] = None
    pagination: Optional[Pagination] = None
