# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:23:52+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header, Path, Query

from models import Error, FeedConnection, FeedConnections, Statement, Statements

app = MCPProxy(
    contact={
        'email': 'api@xero.com',
        'name': 'Xero Platform Team',
        'url': 'https://developer.xero.com',
        'x-twitter': 'XeroAPI',
    },
    description="The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.",
    license={
        'name': 'MIT',
        'url': 'https://github.com/XeroAPI/Xero-OpenAPI/blob/master/LICENSE',
    },
    termsOfService='https://developer.xero.com/xero-developer-platform-terms-conditions/',
    title='Xero Bank Feeds API',
    version='2.9.4',
    servers=[
        {
            'description': 'Xero Bank Feeds API base url',
            'url': 'https://api.xero.com/bankfeeds.xro/1.0',
        }
    ],
)


@app.get(
    '/FeedConnections',
    description=""" By passing in the appropriate options, you can search for available feed connections in the system. """,
    tags=['feed_connection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_feed_connections(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Searches for feed connections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/FeedConnections',
    description=""" By passing in the FeedConnections array object in the body, you can create one or more new feed connections """,
    tags=['feed_connection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_feed_connections(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: FeedConnections = ...,
):
    """
    Create one or more new feed connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/FeedConnections/DeleteRequests',
    description=""" By passing in FeedConnections array object in the body, you can delete a feed connection. """,
    tags=['feed_connection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_feed_connections(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: FeedConnections = ...,
):
    """
    Delete an existing feed connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/FeedConnections/{id}',
    description=""" By passing in a FeedConnection Id options, you can search for matching feed connections """,
    tags=['feed_connection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_feed_connection(
    id: UUID, xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id')
):
    """
    Retrieve single feed connection based on a unique id provided
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Statements',
    description=""" By passing in parameters, you can search for matching statements """,
    tags=['statement_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_statements(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    xero__application__id: Optional[str] = Header(
        '00000000-0000-0000-0000-0000000010000', alias='Xero-Application-Id'
    ),
    xero__user__id: Optional[str] = Header(
        '00000000-0000-0000-0000-0000030000000', alias='Xero-User-Id'
    ),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieve all statements
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Statements',
    tags=['statement_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_statements(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'), body: Statements = None
):
    """
    Creates one or more new statements
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Statements/{statementID}',
    description=""" By passing in a statement id, you can search for matching statements """,
    tags=['statement_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_statement(
    statement_id: UUID = Query(..., alias='statementId'),
    statement_i_d: str = Path(..., alias='statementID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieve single statement based on unique id provided
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
